var config = require('./config.json');
// stack
var usersPool = [];

// Aug 11 2014
// tranquansp
// function looks like a worker, does all tcp/ip requests

var socket_communication = function(io,cluster)
{
	// connection is a server_listener, listening client_hello whenever a handshark occurs
	io.sockets.on('connection', function(socket){
		
		
		// receives client_request 
		socket.on(config.REQ_CLIENT, function(data) {
			// disable !!
			// socket.setNoDelay();
			console.log('sending request ' + data.id_rq);
			// support pool socket	
			// console.log(' trappppppppppppppppppppppppppppp' + data.id_sender);
			// if request is 'find chatter'
			if(data.id_rq  == config.EMIT_FIND_ANONYMOUS_CHATTER)
			{
				console.log('request EMIT_FIND_ANONYMOUS_CHATTER ' + data.id_sender);
				// check there is any chatter avaiable ?
				var usp = usersPool.length;
				console.log(' user count before pop ' + usp);
				if(usp == 0)
				{		
					usersPool.push(data.id_sender);
					console.log(' user count when sender is waiting ' + usersPool.length);
					var room = data.id_sender;
					socket.room = room;
					socket.join(room);
					socket.on('disconnect', function(){
						socket.leave(room);
						console.log(' sender da thoat ');
						var users = io.sockets.manager.rooms['/' + room];
						//console.log(' total socket right now : ' + users.length);
						if(users)
							if(users.length == 1)
								io.sockets.socket(users[0]).disconnect();									
					});							
				}
				else{		
					// pop ready user 
					var receiver_ID = usersPool.pop();		
					console.log(' user count after pop ' + usersPool.length);	
					// if sender is not sender
					if(data.id_sender != receiver_ID){
						
						//console.log('trappppppppppppppppppp' + roomID);
						var room = receiver_ID;
						socket.room = room;
						socket.join(room);
						
						socket.on('disconnect', function(){
							console.log(' receiver da thoat ');
							socket.leave(receiver_ID);
							var users = io.sockets.manager.rooms['/' + receiver_ID];
							
							//console.log(' total socket right now : ' + users.length);
							if(users)
								if(users.length == 1)
									io.sockets.socket(users[0]).disconnect();					
						});
						console.log('[chat Page - handshark] Worker socket core : ' + cluster.worker.id + ' is working');
						// handshark with sender and receiver
						io.sockets.emit(config.RES_SERVER_HANDSHARK + data.id_sender, {rev_ID: receiver_ID});
						io.sockets.emit(config.RES_SERVER_HANDSHARK + receiver_ID, {rev_ID: data.id_sender});
								
					}
				}
			}
			// if request is sending message
			if(data.id_rq  == config.EMIT_SEND_MESSAGE)
			{	
				console.log('request EMIT_SEND_MESSAGE ' + data.sender_id + ' and ' + data.rev_id);
				// need to implement : just send message in room
				// socket.to('room').emit
				var receiver_ID = parseInt(data.rev_id);
				var sender_ID = parseInt(data.sender_id);
				//console.log(' so sanhhhhhhhhhhhhhhhhhhhhhhhhhhh' + matchRoom + " %%%%% " + room_ID);
				// check if receiver and sender is legal ?
					//console.log('go to roommmmmmmmmmmmmmmmmmmmmmmmmmmm');
					// emit to receiver content of sender
				console.log('[chat Page - sendmess] Worker socket core : ' + cluster.worker.id + ' is working');
				io.sockets.emit(config.RES_SERVER_GETMESSAGE + receiver_ID, {sender_content : data.sender_content});	
			}
		});		
	});
}

//# export function socket
exports.socket_communication = socket_communication;



